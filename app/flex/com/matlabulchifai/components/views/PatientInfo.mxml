<?xml version="1.0" encoding="utf-8"?>
<mx:HBox 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" 
	height="100%"
    label="PatientInfo"
	show="init()" xmlns:patient="com.matlabulchifai.components.patient.*">
	
	<mx:Style>
		Label{
			fontSize: 16;
		}
	</mx:Style>

	<mx:Metadata>
		[Event(name="patientConditionCreate", type="com.matlabulchifai.events.patient.PatientConditionEvent")]
		[Event(name="visitTypeCreate", type="com.matlabulchifai.events.visit_type.VisitTypeEvent")]
		[Event(name="patientAllergyCreate", type="com.matlabulchifai.events.patient.PatientAllergyEvent")]
		[Event(name="patientVaccinationCreate", type="com.matlabulchifai.events.patient.PatientVaccinationEvent")]
		[Event(name="prescriptionCreate", type="com.matlabulchifai.events.patient.PrescriptionEvent")]
	</mx:Metadata>
		
	<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import mx.core.Application;
		import mx.collections.ArrayCollection;
		import flash.events.Event;
		import mx.events.ListEvent;
		import mx.core.IFlexDisplayObject;
		import mx.rpc.events.ResultEvent;
		import mx.collections.XMLListCollection;
    	import mx.collections.IViewCursor;
		import mx.managers.PopUpManager;
		import com.matlabulchifai.components.popups.VaccCreateTitleWin;
		import com.matlabulchifai.components.popups.VaccinationUpdateTitleWin;
		import com.matlabulchifai.components.popups.VisitCreateTitleWin;
		import com.matlabulchifai.components.popups.VisitUpdateTitleWin;
		import com.matlabulchifai.components.popups.MedicationCreateTitleWin;
		import com.matlabulchifai.components.popups.MedicationUpdateTitleWin;
		import com.matlabulchifai.events.patient.PatientEvent;
		import com.matlabulchifai.events.patient.PatientVaccinationEvent;
		import com.matlabulchifai.events.patient.PatientVisitEvent;
		import com.matlabulchifai.events.patient.PrescriptionEvent;
		import com.matlabulchifai.events.patient.PatientMedicationEvent;
		import com.matlabulchifai.events.patient.PatientConditionEvent;
		import com.matlabulchifai.events.allergy.AllergyEvent;
		import com.matlabulchifai.events.vaccination.VaccinationEvent;
		import com.matlabulchifai.events.condition.ConditionEvent;
		import com.matlabulchifai.events.medication.MedicationEvent;
		import com.matlabulchifai.events.visit_type.VisitTypeEvent;
		import com.matlabulchifai.events.doctor.DoctorEvent;
		import com.matlabulchifai.components.popups.uploadImageWin;
		
		import com.matlabulchifai.components.patient.*;

		
		[Bindable]
		public var languageArray:Object;
		[Bindable]        
		public var patientIdMap:Object;
		[Bindable]        
		public var allergyIdMap:Object;
		[Bindable]        
		public var vaccinationIdMap:Object;
		[Bindable]        
		public var conditionIdMap:Object;
		[Bindable]        
		public var medicationIdMap:Object;	
		[Bindable]        
		public var visitTypeIdMap:Object;
		[Bindable]        
		public var doctorIdMap:Object;
		[Bindable]
		public var allergies:ArrayCollection;
		[Bindable]
		public var vaccinations:ArrayCollection;
		[Bindable]
		public var medications:ArrayCollection;
		[Bindable]
		public var conditions:ArrayCollection;
		[Bindable]
		public var visitTypes:ArrayCollection;
		[Bindable]
		public var doctors:ArrayCollection;
		
		[Bindable]
		public var patientID:Number = 0;
		
		[Bindable]
		public var patient:XML;
		
		private var authToken:String = "?authenticity_token=" + Application.application.parameters.authenticityToken;
		private var rnd:Number;
		private var vaccPopUp:VaccCreateTitleWin;
		private var visitPopUp:VisitCreateTitleWin;
		private var medicationPopUp:MedicationCreateTitleWin;
		private var vaccinationUpdatePopUp:VaccinationUpdateTitleWin;
		private var medicationUpdatePopUp:MedicationUpdateTitleWin;
		private var visitUpdatePopUp:VisitUpdateTitleWin;
		private var uploadPopUp:uploadImageWin;
		
		public function init():void {
			if(patient == null){
				patientInfoMain.visible = false;
				patientTab.visible = false;
				patientImage.visible = false;
				uploadButton.visible = false;
				errorMessage.visible = true;
				return;
			}
			errorMessage.visible = false;
			patientInfoMain.visible = true;
			patientTab.visible = true;
			patientImage.visible = true;
			uploadButton.visible = true;
			
			Matlabulchifai.debug("PatientInfo init() called");
			Matlabulchifai.debug("patient: " + patient);
			Matlabulchifai.debug("Patient ID: " + patient.id);
			patientID = patient.id;
			rnd = Math.round(Math.random()*1000);
			alertVbox.listAlerts();
			patientInfoMain.selectedIndex = 0;
			Matlabulchifai.debug("Leaving init in PatientInfo");		
			
			displayPatientPicture();
		}
		
		private function displayPatientPicture():void {
			var photoURL:String = patient.photo_file_name;
			
			if (photoURL != null) {
				patientImage.source =  "/patients/photos/" + patient.id + 
									   "/medium_" + patient.photo_file_name;
			} else {
				patientImage.source = "/patients/photos/missing.jpg";
			}
		}
		
		
		
		public function listMedications():void {
			medicationsXLC.removeAll();
			svcMedicationsList.url="/patients/" + patientID + "/patient_medications.xml?";
			svcMedicationsList.send();
		}
		
		private function handleMedicationsListResult(event:ResultEvent):void {
			var resultXML:XML = XML(event.result);
			Matlabulchifai.debug("prescriptions_notes = \n" + resultXML);
			this.enabled = true;
		}
		
		public function listVaccinations():void {
			vaccinationsXLC.removeAll();
			svcVaccinationsList.url="/patients/" + patientID + "/patient_vaccinations.xml";
			svcVaccinationsList.send();
		}
		
		private function handleVaccinationsListResult(event:ResultEvent):void {
			var resultXML:XML = XML(event.result);
			Matlabulchifai.debug("patient_vaccinations = \n" + resultXML);
			this.enabled = true;
		}
		
		public function listPhysicals():void {
			svcPhysicalHeightsList.url="/patients/" + patientID + "/patient_physicals/height.xml";
			svcPhysicalHeightsList.send();
			
			svcPhysicalWeightsList.url="/patients/" + patientID + "/patient_physicals/weight.xml";
			svcPhysicalWeightsList.send();
			
			svcPhysicalBloodPressuresList.url="/patients/" + patientID + "/patient_physicals/blood_pressure.xml";
			svcPhysicalBloodPressuresList.send();
			
			svcPhysicalTemperaturesList.url="/patients/" + patientID + "/patient_physicals/temperature.xml";
			svcPhysicalTemperaturesList.send();
			
			svcPhysicalPulsesList.url="/patients/" + patientID + "/patient_physicals/pulse.xml";
			svcPhysicalPulsesList.send();
			
		}
		
		public function listVisits():void {
			visitsXLC.removeAll();
			svcVisitsList.url="/patients/" + patientID + "/patient_visits.xml?";
			svcVisitsList.send();
		}
		
		private function handleVisitsListResult(event:ResultEvent):void {
			var resultXML:XML = XML(event.result);
			Matlabulchifai.debug("visit_allergies = \n" + resultXML);
			this.enabled = true;
		}
		
		private function getDoctorName(item:Object, column:DataGridColumn):String {
			var doctor:XML = doctorIdMap[item.doctor_id];
			return doctor.name;
		}
		
		private function getVaccinationName(item:Object, column:DataGridColumn):String {
			var vaccination:XML = vaccinationIdMap[item.vaccination_id];
			return vaccination.name;
		}
		
		private function getConditionName(item:Object, column:DataGridColumn):String {
			var condition:XML = conditionIdMap[item.condition_id];
			return condition.name;
		}
		
		private function getMedicationName(item:Object, column:DataGridColumn):String {
			var medication:XML = medicationIdMap[item.medication_id];
			return medication.name;
		}
		
		//need to loop for now because db (not optimized) is slow in responding
		//does not respond fast enough to update the visitTypeIdMap
		private function getVisitType(item:Object, column:DataGridColumn):String {
			var visitType:XML;
			while (visitTypeIdMap[item.visit_type_id] == null) {}
			visitType = visitTypeIdMap[item.visit_type_id];
			return visitType.name;
		}
		
		private function showVaccCreateTitleWin():void {
			vaccPopUp = VaccCreateTitleWin(PopUpManager.createPopUp(this, VaccCreateTitleWin, true));
			vaccPopUp.addEventListener(PatientVaccinationEvent.PATIENT_VACCINATION_CREATE, handlePatientVaccEvent);
			vaccPopUp.patient = this.patient;
			vaccPopUp.languageArray = this.languageArray;
			vaccPopUp.patientID = this.patientID;
			vaccPopUp.vaccinations = this.vaccinations;
			vaccPopUp.vaccinationIdMap = this.vaccinationIdMap;
			PopUpManager.centerPopUp(vaccPopUp);
			vaccPopUp.addEventListener(PatientVaccinationEvent.PATIENT_VACCINATION_CREATE, handlePatientVaccEvent);
			vaccPopUp.addEventListener(VaccinationEvent.VACCINATION_CREATE, handleVaccinationCreateEvent);
		}
		
		//upon receiving a fresh patient vaccination:
		//update the vaccinations id map via dispatching a new VaccinationEvent
		//make sure that the event is dispatched before calling listVaccinations()	
		public function handlePatientVaccEvent(event:Event):void {
			listVaccinations();
			removePatientVaccEventListener();
		}
		
		public function removePatientVaccEventListener():void {
			if (vaccPopUp.hasEventListener(PatientVaccinationEvent.PATIENT_VACCINATION_CREATE)) {
				vaccPopUp.removeEventListener(PatientVaccinationEvent.PATIENT_VACCINATION_CREATE, handlePatientVaccEvent);
			}
		}
		
		private function showVisitCreateTitleWin():void {
			visitPopUp = VisitCreateTitleWin(PopUpManager.createPopUp(this, VisitCreateTitleWin, true));
			visitPopUp.patient = this.patient;
			visitPopUp.patientID = this.patientID;
			visitPopUp.visitTypeIdMap = this.visitTypeIdMap;
			visitPopUp.conditionIdMap = this.conditionIdMap;
			visitPopUp.doctorIdMap = this.doctorIdMap;
			visitPopUp.visitTypes = this.visitTypes;
			visitPopUp.doctors = this.doctors;
			visitPopUp.conditions = this.conditions;
			visitPopUp.languageArray = this.languageArray;
			PopUpManager.centerPopUp(visitPopUp);
			visitPopUp.addEventListener(PatientVisitEvent.PATIENT_VISIT_CREATE, handleVisitEvent);
			visitPopUp.addEventListener(VisitTypeEvent.VISIT_TYPE_CREATE, handleVisitTypeCreateEvent);
			visitPopUp.addEventListener(ConditionEvent.CONDITION_CREATE, handleConditionCreateEvent);
			visitPopUp.addEventListener(DoctorEvent.DOCTOR_CREATE, handleDoctorCreateEvent);
		}
		

		public function handleVisitEvent(event:Event):void {
			listVisits();
			removeVisitEventListener();
		}
		
		public function removeVisitEventListener():void {
			if (visitPopUp.hasEventListener(PatientVisitEvent.PATIENT_VISIT_CREATE)) {
				visitPopUp.removeEventListener(PatientVisitEvent.PATIENT_VISIT_CREATE, handleVisitEvent);
			}
		}

		private function showuploadImageWindow():void{
			uploadPopUp = uploadImageWin(PopUpManager.createPopUp(this,uploadImageWin,true));
			PopUpManager.centerPopUp(uploadPopUp);
		}					
		
		private function showMedicationCreateTitleWin():void {				    			
			medicationPopUp = MedicationCreateTitleWin(PopUpManager.createPopUp(this, MedicationCreateTitleWin, true));
			medicationPopUp.patient = this.patient;				
			medicationPopUp.patientID = this.patientID;  
			medicationPopUp.medicationIdMap = this.medicationIdMap;
			medicationPopUp.doctorIdMap = this.doctorIdMap;
			medicationPopUp.conditionIdMap = this.conditionIdMap;
			medicationPopUp.conditions = this.conditions;
			medicationPopUp.doctors = this.doctors;
			medicationPopUp.medications = this.medications;
			medicationPopUp.languageArray = this.languageArray;
			PopUpManager.centerPopUp(medicationPopUp);
			medicationPopUp.addEventListener(PatientMedicationEvent.PATIENT_MEDICATION_CREATE, handlePatientMedicationEvent);
			medicationPopUp.addEventListener(MedicationEvent.MEDICATION_CREATE, handleMedicationCreateEvent);
			medicationPopUp.addEventListener(ConditionEvent.CONDITION_CREATE, handleConditionCreateEvent);
			medicationPopUp.addEventListener(DoctorEvent.DOCTOR_CREATE, handleDoctorCreateEvent);		
		}						
		
		//upon receiving a fresh patient prescription:
		//update the conditions id map via dispatching a new ConditionEvent
		//update the medication id map via dispatching a new PrescriptionEvent
		//make sure events are dispatched before calling listMedications()
		public function handlePatientMedicationEvent(event:Event):void {
			listMedications();				
			removePatientMedicationEventListener();			
		}						
		
		public function removePatientMedicationEventListener():void {				
			if (medicationPopUp.hasEventListener(PatientMedicationEvent.PATIENT_MEDICATION_CREATE)) {					
				medicationPopUp.removeEventListener(PatientMedicationEvent.PATIENT_MEDICATION_CREATE, handlePatientMedicationEvent);				
			}			
		}	    	
		
		public function deleteVaccination(vaccination:XML):void {
			this.enabled = false;
			svcVaccinationsDestroy.url = "/patient_vaccinations/" + vaccination.id + ".xml" + authToken;
			svcVaccinationsDestroy.send({_method:"DELETE"});
	    }
	    
	    private function handleVaccinationsDestroyResult(event:ResultEvent):void {
	    	listVaccinations();
	    }
		
		private function handleVaccinationClick(event:ListEvent):void {
			if (event.columnIndex != event.currentTarget.columns.length-1){
				var vaccination:XML = XML(event.currentTarget.selectedItem)
				showVaccinationUpdateTitleWin(vaccination);
			}
		}
		
		private function showVaccinationUpdateTitleWin(vaccination:XML):void {				
			vaccinationUpdatePopUp = VaccinationUpdateTitleWin(PopUpManager.createPopUp(this, VaccinationUpdateTitleWin, true));
			vaccinationUpdatePopUp.patient = patient;
			vaccinationUpdatePopUp.vaccination = vaccination;
			vaccinationUpdatePopUp.vaccinations = vaccinations;
			vaccinationUpdatePopUp.vaccinationIdMap = vaccinationIdMap					
			vaccinationUpdatePopUp.languageArray = languageArray;
			PopUpManager.centerPopUp(vaccinationUpdatePopUp);
			vaccinationUpdatePopUp.addEventListener(PatientVaccinationEvent.PATIENT_VACCINATION_UPDATE, handleVaccinationUpdateEvent);
			vaccinationUpdatePopUp.addEventListener(VaccinationEvent.VACCINATION_CREATE, handleVaccinationCreateEvent);
		}
		
		public function handleVaccinationUpdateEvent(event:PatientVaccinationEvent):void {			
			listVaccinations();				
			removeVaccinationUpdateEventListener();			
		}
		
		public function handleVaccinationCreateEvent(event:Event):void {			
			dispatchEvent(new VaccinationEvent(VaccinationEvent.VACCINATION_CREATE, null));						
			removeVaccinationCreateEventListener();			
		}
		
		public function removeVaccinationUpdateEventListener():void {				
			if (vaccinationUpdatePopUp.hasEventListener(PatientVaccinationEvent.PATIENT_VACCINATION_UPDATE)) {					
				vaccinationUpdatePopUp.removeEventListener(PatientVaccinationEvent.PATIENT_VACCINATION_UPDATE, handleVaccinationUpdateEvent);				
			}			
		}
		
		public function removeVaccinationCreateEventListener():void {				
			if (vaccinationUpdatePopUp != null) {
				if (vaccinationUpdatePopUp.hasEventListener(VaccinationEvent.VACCINATION_CREATE)) {					
					vaccinationUpdatePopUp.removeEventListener(VaccinationEvent.VACCINATION_CREATE, handleVaccinationCreateEvent);				
				}
			}
			
			if (vaccPopUp != null) {
				if (vaccPopUp.hasEventListener(VaccinationEvent.VACCINATION_CREATE)) {					
					vaccPopUp.removeEventListener(VaccinationEvent.VACCINATION_CREATE, handleVaccinationCreateEvent);				
				}
			}
		}
		
		public function deleteMedication(medication:XML):void {
			this.enabled = false;
			svcMedicationsDestroy.url = "/patient_medications/" + medication.id + ".xml" + authToken;
			svcMedicationsDestroy.send({_method:"DELETE"});
	    }
	    
	    private function handleMedicationsDestroyResult(event:ResultEvent):void {
	    	listMedications();
	    }
		
		private function handleMedicationClick(event:ListEvent):void {
			if (event.columnIndex != event.currentTarget.columns.length-1){
				var medication:XML = XML(event.currentTarget.selectedItem)
				showMedicationUpdateTitleWin(medication);
			}
		}
		
		private function showMedicationUpdateTitleWin(medication:XML):void {				
			medicationUpdatePopUp = MedicationUpdateTitleWin(PopUpManager.createPopUp(this, MedicationUpdateTitleWin, true));
			medicationUpdatePopUp.patient = patient;
			medicationUpdatePopUp.medication = medication;
			medicationUpdatePopUp.medications = medications;
			medicationUpdatePopUp.conditions = conditions;
			medicationUpdatePopUp.doctors = doctors;
			medicationUpdatePopUp.medicationIdMap = medicationIdMap;	
			medicationUpdatePopUp.conditionIdMap = conditionIdMap;
			medicationUpdatePopUp.doctorIdMap = doctorIdMap;			
			medicationUpdatePopUp.languageArray = languageArray;
			PopUpManager.centerPopUp(medicationUpdatePopUp);
			medicationUpdatePopUp.addEventListener(PatientMedicationEvent.PATIENT_MEDICATION_UPDATE, handleMedicationUpdateEvent);
			medicationUpdatePopUp.addEventListener(MedicationEvent.MEDICATION_CREATE, handleMedicationCreateEvent);
			medicationUpdatePopUp.addEventListener(ConditionEvent.CONDITION_CREATE, handleConditionCreateEvent);
			medicationUpdatePopUp.addEventListener(DoctorEvent.DOCTOR_CREATE, handleDoctorCreateEvent);
		}
		
		public function handleMedicationUpdateEvent(event:PatientMedicationEvent):void {			
			listMedications();
			removeMedicationUpdateEventListener();		
		}
		
		public function handleMedicationCreateEvent(event:Event):void {			
			dispatchEvent(new MedicationEvent(MedicationEvent.MEDICATION_CREATE, null));
			removeMedicationCreateEventListener();			
		}
		
		public function handleConditionCreateEvent(event:Event):void {			
			dispatchEvent(new ConditionEvent(ConditionEvent.CONDITION_CREATE, null));
			removeConditionCreateEventListener();				
		}
		
		public function handleDoctorCreateEvent(event:Event):void {			
			dispatchEvent(new DoctorEvent(DoctorEvent.DOCTOR_CREATE, null));
			removeDoctorCreateEventListener();				
		}
		
		public function removeMedicationUpdateEventListener():void {				
			if (medicationUpdatePopUp.hasEventListener(PatientMedicationEvent.PATIENT_MEDICATION_UPDATE)) {					
				medicationUpdatePopUp.removeEventListener(PatientMedicationEvent.PATIENT_MEDICATION_UPDATE, handleMedicationUpdateEvent);				
			}			
		}
		
		public function removeMedicationCreateEventListener():void {				
			if (medicationPopUp != null) {
				if (medicationPopUp.hasEventListener(MedicationEvent.MEDICATION_CREATE)) {					
					medicationPopUp.removeEventListener(MedicationEvent.MEDICATION_CREATE, handleMedicationCreateEvent);				
				}
			}
			if (medicationUpdatePopUp != null) {
				if (medicationUpdatePopUp.hasEventListener(MedicationEvent.MEDICATION_CREATE)) {					
					medicationUpdatePopUp.removeEventListener(MedicationEvent.MEDICATION_CREATE, handleMedicationCreateEvent);				
				}
			}			
		}
		
		public function removeConditionCreateEventListener():void {	
			if (medicationPopUp != null) {
				if (medicationPopUp.hasEventListener(ConditionEvent.CONDITION_CREATE)) {					
					medicationPopUp.removeEventListener(ConditionEvent.CONDITION_CREATE, handleConditionCreateEvent);				
				}	
			}
			if (medicationUpdatePopUp != null) {
				if (medicationUpdatePopUp.hasEventListener(ConditionEvent.CONDITION_CREATE)) {					
					medicationUpdatePopUp.removeEventListener(ConditionEvent.CONDITION_CREATE, handleConditionCreateEvent);				
				}	
			}	
			if (visitUpdatePopUp != null) {
				if (visitUpdatePopUp.hasEventListener(ConditionEvent.CONDITION_CREATE)) {					
					visitUpdatePopUp.removeEventListener(ConditionEvent.CONDITION_CREATE, handleConditionCreateEvent);				
				}
			}
			if (visitPopUp != null) {
				if (visitPopUp.hasEventListener(ConditionEvent.CONDITION_CREATE)) {					
					visitPopUp.removeEventListener(ConditionEvent.CONDITION_CREATE, handleConditionCreateEvent);				
				}
			}
		}
		
		public function removeDoctorCreateEventListener():void {				
			if (medicationPopUp != null) {
				if (medicationPopUp.hasEventListener(DoctorEvent.DOCTOR_CREATE)) {					
					medicationPopUp.removeEventListener(DoctorEvent.DOCTOR_CREATE, handleDoctorCreateEvent);				
				}	
			}	
			if (medicationUpdatePopUp != null) {
				if (medicationUpdatePopUp.hasEventListener(DoctorEvent.DOCTOR_CREATE)) {					
					medicationUpdatePopUp.removeEventListener(DoctorEvent.DOCTOR_CREATE, handleDoctorCreateEvent);				
				}	
			}	
			if (visitUpdatePopUp != null) {
				if (visitUpdatePopUp.hasEventListener(DoctorEvent.DOCTOR_CREATE)) {					
					visitUpdatePopUp.removeEventListener(DoctorEvent.DOCTOR_CREATE, handleDoctorCreateEvent);				
				}
			}
			if (visitPopUp != null) {
				if (visitPopUp.hasEventListener(DoctorEvent.DOCTOR_CREATE)) {					
					visitPopUp.removeEventListener(DoctorEvent.DOCTOR_CREATE, handleDoctorCreateEvent);				
				}
			}
		}
		
		public function deleteVisit(visit:XML):void {
			this.enabled = false;
			svcVisitsDestroy.url = "/patient_visits/" + visit.id + ".xml" + authToken;
			svcVisitsDestroy.send({_method:"DELETE"});
	    }
	    
	    private function handleVisitsDestroyResult(event:ResultEvent):void {
	    	listVisits();
	    }
		
		private function handleVisitClick(event:ListEvent):void {
			if (event.columnIndex != event.currentTarget.columns.length-1){
				var visit:XML = XML(event.currentTarget.selectedItem)
				showVisitUpdateTitleWin(visit);
			}
		}
		
		private function showVisitUpdateTitleWin(visit:XML):void {				
			visitUpdatePopUp = VisitUpdateTitleWin(PopUpManager.createPopUp(this, VisitUpdateTitleWin, true));
			visitUpdatePopUp.patient = patient;
			visitUpdatePopUp.visit = visit;
			visitUpdatePopUp.visitTypes = visitTypes;
			visitUpdatePopUp.conditions = conditions;
			visitUpdatePopUp.doctors = doctors;
			visitUpdatePopUp.visitTypeIdMap = visitTypeIdMap;	
			visitUpdatePopUp.conditionIdMap = conditionIdMap;
			visitUpdatePopUp.doctorIdMap = doctorIdMap;			
			visitUpdatePopUp.languageArray = languageArray;
			PopUpManager.centerPopUp(visitUpdatePopUp);
			visitUpdatePopUp.addEventListener(PatientVisitEvent.PATIENT_VISIT_UPDATE, handleVisitUpdateEvent);
			visitUpdatePopUp.addEventListener(VisitTypeEvent.VISIT_TYPE_CREATE, handleVisitTypeCreateEvent);
			visitUpdatePopUp.addEventListener(ConditionEvent.CONDITION_CREATE, handleConditionCreateEvent);
			visitUpdatePopUp.addEventListener(DoctorEvent.DOCTOR_CREATE, handleDoctorCreateEvent);
		}
		
		public function handleVisitUpdateEvent(event:PatientVisitEvent):void {			
			listVisits();		
			removeVisitUpdateEventListener();			
		}
		
		public function removeVisitUpdateEventListener():void {				
			if (visitUpdatePopUp.hasEventListener(PatientVisitEvent.PATIENT_VISIT_UPDATE)) {					
				visitUpdatePopUp.removeEventListener(PatientVisitEvent.PATIENT_VISIT_UPDATE, handleVisitUpdateEvent);				
			}			
		}
		
		public function handleVisitTypeCreateEvent(event:Event):void {			
			dispatchEvent(new VisitTypeEvent(VisitTypeEvent.VISIT_TYPE_CREATE, null));
			removeVisitTypeCreateEventListener();			
		}
		
		public function removeVisitTypeCreateEventListener():void {				
			if (visitUpdatePopUp != null) {
				if (visitUpdatePopUp.hasEventListener(VisitTypeEvent.VISIT_TYPE_CREATE)) {					
					visitUpdatePopUp.removeEventListener(VisitTypeEvent.VISIT_TYPE_CREATE, handleVisitTypeCreateEvent);				
				}
			}
			
			if (visitPopUp != null) {
				if (visitPopUp.hasEventListener(VisitTypeEvent.VISIT_TYPE_CREATE)) {					
					visitPopUp.removeEventListener(VisitTypeEvent.VISIT_TYPE_CREATE, handleVisitTypeCreateEvent);				
				}
			}
		}
		[Bindable]
		public var heights:ArrayCollection;
		public function handlePhysicalHeight(event:ResultEvent):void{
			
    		heights = new ArrayCollection();
			var heightsCursor:IViewCursor =
		            heightsXLC.createCursor();
		        while (!heightsCursor.afterLast) {
		            var visit:XML = XML(heightsCursor.current);   
		        	var newHeight:Object = new Object();
		    		newHeight.value = visit.height;
		    		newHeight.visit_date = visit.visit_date;
		    		heights.addItem(newHeight);
		            heightsCursor.moveNext();
		        }
		}
		[Bindable]
		public var weights:ArrayCollection;
		public function handlePhysicalWeight(event:ResultEvent):void{
    		weights = new ArrayCollection();
			var weightsCursor:IViewCursor =
		            weightsXLC.createCursor();
		        while (!weightsCursor.afterLast) {
		            var visit:XML = XML(weightsCursor.current);   
		        	var newWeight:Object = new Object();
		    		newWeight.value = visit.weight;
		    		newWeight.visit_date = visit.visit_date;
		    		weights.addItem(newWeight);
		            weightsCursor.moveNext();
		        }
		}
		[Bindable]
		public var pulses:ArrayCollection;
		public function handlePhysicalPulse(event:ResultEvent):void{
    		pulses = new ArrayCollection();
			var pulsesCursor:IViewCursor =
		            pulsesXLC.createCursor();
		        while (!pulsesCursor.afterLast) {
		            var visit:XML = XML(pulsesCursor.current);   
		        	var newPulse:Object = new Object();
		    		newPulse.value = visit.pulse;
		    		newPulse.visit_date = visit.visit_date;
		    		pulses.addItem(newPulse);
		            pulsesCursor.moveNext();
		        }
	   		
		}
		[Bindable]
		public var temps:ArrayCollection;
		public function handlePhysicalTemp(event:ResultEvent):void{
    		temps = new ArrayCollection();
			var tempsCursor:IViewCursor =
		            temperaturesXLC.createCursor();
		        while (!tempsCursor.afterLast) {
		            var visit:XML = XML(tempsCursor.current);   
		        	var newTemp:Object = new Object();
		    		newTemp.value = visit.temperature;
		    		newTemp.visit_date = visit.visit_date;
		    		temps.addItem(newTemp);
		            tempsCursor.moveNext();
		        }
		}
		[Bindable]
		public var bps:ArrayCollection;
		public function handlePhysicalBP(event:ResultEvent):void{
    		bps = new ArrayCollection();
    		//mx.controls.Alert.show(event.result.toString());
			var bpsCursor:IViewCursor =
		            bloodPressuresXLC.createCursor();
		        while (!bpsCursor.afterLast) {
		            var visit:XML = XML(bpsCursor.current);   
		        	var newbps:Object = new Object();
		        	newbps.value = visit.systolic;
		        	newbps.value2 = visit.diastolic;
		        	//mx.controls.Alert.show(newbps.value+"_"+newbps.value2);
		    		newbps.visit_date = visit.visit_date;
		    		bps.addItem(newbps);
		            bpsCursor.moveNext();
		        }
		   
		}

	]]>
	</mx:Script>
	
	<mx:HTTPService
        id="svcVaccinationsList"
        resultFormat="e4x"
        result="handleVaccinationsListResult(event)"/>
	<mx:XMLListCollection id="vaccinationsXLC"
        source="{XMLList(svcVaccinationsList.lastResult.children())}"/>

	<mx:HTTPService
        id="svcVisitsList"
        resultFormat="e4x"
        result="handleVisitsListResult(event)"/>
	<mx:XMLListCollection id="visitsXLC"
        source="{XMLList(svcVisitsList.lastResult.children())}"/>
		
	<mx:HTTPService
        id="svcMedicationsList"
        resultFormat="e4x"
        result="handleMedicationsListResult(event)"/>
	<mx:XMLListCollection id="medicationsXLC"
        source="{XMLList(svcMedicationsList.lastResult.children())}"/>
        
    <mx:HTTPService
        id="svcPhysicalHeightsList"
        resultFormat="e4x"
        result="handlePhysicalHeight(event)"/>
	<mx:XMLListCollection id="heightsXLC"
        source="{XMLList(svcPhysicalHeightsList.lastResult.children())}"/>
    
    <mx:HTTPService
        id="svcPhysicalWeightsList"
        resultFormat="e4x"
        result="handlePhysicalWeight(event)"/>
	<mx:XMLListCollection id="weightsXLC"
        source="{XMLList(svcPhysicalWeightsList.lastResult.children())}"/>
    
    <mx:HTTPService
        id="svcPhysicalBloodPressuresList"
        resultFormat="e4x"
        result="handlePhysicalBP(event)"/>
	<mx:XMLListCollection id="bloodPressuresXLC"
        source="{XMLList(svcPhysicalBloodPressuresList.lastResult.children())}"/>
    
    <mx:HTTPService
        id="svcPhysicalTemperaturesList"
        resultFormat="e4x"
        result="handlePhysicalTemp(event)"/>
	<mx:XMLListCollection id="temperaturesXLC"
        source="{XMLList(svcPhysicalTemperaturesList.lastResult.children())}"/>
    
    <mx:HTTPService
        id="svcPhysicalPulsesList"
        resultFormat="e4x"
        result="handlePhysicalPulse(event)"/>
	<mx:XMLListCollection id="pulsesXLC"
        source="{XMLList(svcPhysicalPulsesList.lastResult.children())}"/>
    
    <mx:HTTPService
        id="svcVaccinationsDestroy"
        resultFormat="e4x"
        method="POST"
        result="handleVaccinationsDestroyResult(event)"/>
        
    <mx:HTTPService
        id="svcMedicationsDestroy"
        resultFormat="e4x"
        method="POST"
        result="handleMedicationsDestroyResult(event)"/>
    
    <mx:HTTPService
        id="svcVisitsDestroy"
        resultFormat="e4x"
        method="POST"
        result="handleVisitsDestroyResult(event)"/>
        	
	<mx:VBox label="Main" height="100%" width="20%">
		<mx:Label text="{patient['first_name']} {patient['last_name']}" fontSize="36" color="#171712"/>
		<mx:Image id="patientImage"/>		
		<mx:Button id="uploadButton" label="Upload Image" click="showuploadImageWindow()"/> <!-- TODO: Add to Language Array-->
	</mx:VBox>
   	<mx:VBox height="100%" width="80%" verticalGap="0">
   		<mx:Label id="errorMessage" text="{languageArray['Error:  This patient has been deleted.']}" fontSize="36" color="#171712"/>
  		
   		<mx:TabBar dataProvider="{patientInfoMain}" 
   			fontWeight="Bold" paddingTop="0" paddingBottom="0" id="patientTab"/>
 		
   		<mx:ViewStack 
   			id="patientInfoMain" 
   			width="100%" 
   			height="100%">
	   		<patient:PatientAlertViewBox id="alertVbox" patient="{patient}" patientID="{patientID}"/>
	   			
	   		<patient:PatientGeneralViewBox id="generalVbox" patient="{patient}" patientIdMap="{patientIdMap}"/>
	   		
	   		<patient:PatientNotesViewBox id="notesVbox" patient="{patient}" patientID="{patientID}"/>
	   		
	   		<patient:PatientAllergyViewBox id="allergyVbox" patient="{patient}" patientID="{patientID}" 
	   			allergies="{allergies}" allergyIdMap="{allergyIdMap}"/>
	   		
	   		<mx:VBox label="{languageArray['Visits-Conditions']}" show="listVisits()">
	   			<mx:Panel title="{languageArray['Visits List']}" width="100%" height="100%" 
	   				paddingTop="5" paddingLeft="5" paddingRight="5">
		   			<mx:LinkButton label="{languageArray['Add New Visit']}" color="#0000FF" click="showVisitCreateTitleWin()"/>
		   			<mx:DataGrid id="visitsGrid" width="100%" height="100%" textAlign="center" 
		   				dataProvider="{visitsXLC}" wordWrap="true" variableRowHeight="true"
		   				itemClick="handleVisitClick(event)">						
		   				<mx:columns>
		   					<mx:DataGridColumn headerText="{languageArray['Visit Date']}" width="85"
				                dataField="visit_date"/>														
		   					<mx:DataGridColumn headerText="{languageArray['Condition Name']}" width="250"
				                labelFunction="getConditionName"/>
				            <mx:DataGridColumn id="visit_type_column" headerText="{languageArray['Visit Type']}" width="125"
				                labelFunction="getVisitType" />
							<mx:DataGridColumn headerText="{languageArray['Doctor Name']}" width="125"
				                labelFunction="getDoctorName"/>	
				            <mx:DataGridColumn headerText="{languageArray['Notes']}"
				                dataField="notes"/>
				            <mx:DataGridColumn headerText="" width="150" 
				                    editable="false">
				                    <mx:itemRenderer>
				                        <mx:Component>
				                            <mx:Button label="{outerDocument.languageArray['Delete Visit']}" click="outerDocument.deleteVisit(XML(data))" />
				                        </mx:Component>
				                    </mx:itemRenderer>
							</mx:DataGridColumn>				
		   				</mx:columns>					
		   			</mx:DataGrid>
	   			</mx:Panel>
	   		</mx:VBox>
	   		<mx:VBox label="{languageArray['Prescriptions']}" show="listMedications()">
	   			<mx:Panel title="{languageArray['Prescription List']}" width="100%" height="100%" 
	   				paddingTop="5" paddingLeft="5" paddingRight="5">
		   			<mx:LinkButton label="{languageArray['Add New Prescription']}" color="#0000FF" 
		   				click="showMedicationCreateTitleWin()"/>
		   			<mx:DataGrid id="prescriptionsGrid" width="100%" height="100%" textAlign="center" 
		   				dataProvider="{medicationsXLC}" wordWrap="true" variableRowHeight="true"
		   				itemClick="handleMedicationClick(event)">						
		   				<mx:columns>														
		   					<mx:DataGridColumn headerText="{languageArray['Medicine Name']}" width="110"
			                	labelFunction="getMedicationName"/>
				            <mx:DataGridColumn headerText="{languageArray['Date Given']}" width="85"
				                dataField="date_given"/>
				            <mx:DataGridColumn headerText="{languageArray['Condition Name']}" width="110"
				                labelFunction="getConditionName"/>
				            <mx:DataGridColumn headerText="{languageArray['Doctor Name']}" width="110"
				                labelFunction="getDoctorName"/>
				            <mx:DataGridColumn headerText="{languageArray['Dosage']}" width="80"
				                dataField="dosage"/>
				            <mx:DataGridColumn headerText="{languageArray['Frequency']}" width="100"
				                dataField="frequency"/>		
				            <mx:DataGridColumn headerText="{languageArray['Notes']}"
				                dataField="notes"/>
				            <mx:DataGridColumn headerText="" width="150" 
				                    editable="false">
				                    <mx:itemRenderer>
				                        <mx:Component>
				                            <mx:Button label="{outerDocument.languageArray['Delete Prescription']}" click="outerDocument.deleteMedication(XML(data))" />
				                        </mx:Component>
				                    </mx:itemRenderer>
							</mx:DataGridColumn>					
		   				</mx:columns>					
		   			</mx:DataGrid>
	   			</mx:Panel>
	   		</mx:VBox>
	   		<mx:VBox label="{languageArray['Vaccinations']}" show="listVaccinations()" >
	   			<mx:Panel title="{languageArray['Vaccination List']}" width="100%" height="100%" 
	   				paddingTop="5" paddingLeft="5" paddingRight="5">
		   			<mx:LinkButton label="{languageArray['Add New Vaccination']}" color="#0000FF" 
		   				click="showVaccCreateTitleWin()"/>
		   			<mx:DataGrid id="vaccinationsGrid" width="100%" height="100%" textAlign="center" 
		   				dataProvider="{vaccinationsXLC}" wordWrap="true" variableRowHeight="true"
		   				itemClick="handleVaccinationClick(event)">						
		   				<mx:columns>														
				        	<mx:DataGridColumn headerText="{languageArray['Vaccination Name']}" width="250"
				                labelFunction="getVaccinationName"/>
				            <mx:DataGridColumn headerText="{languageArray['Date Administered']}" width="125"
				                dataField="date_admined"/>	
				            <mx:DataGridColumn headerText="{languageArray['Notes']}"
				                dataField="notes"/>
				            <mx:DataGridColumn headerText="" width="150" 
				                    editable="false">
				                    <mx:itemRenderer>
				                        <mx:Component>
				                            <mx:Button label="{outerDocument.languageArray['Delete Vaccination']}" click="outerDocument.deleteVaccination(XML(data))" />
				                        </mx:Component>
				                    </mx:itemRenderer>
							</mx:DataGridColumn>
		   				</mx:columns>					
		   			</mx:DataGrid>
	   			</mx:Panel>
	   		</mx:VBox>

	   		<mx:VBox label="Physical Data" show="listPhysicals();graphPan.title='Height';graphChart.dataProvider=heights;catAxis.dataProvider=heights;lineSeries1.displayName='Height';lineSeries2.visible=false;">
	   			<mx:Panel title="Data Graphs" width="100%" height="100%" 
	   				paddingTop="5" paddingLeft="5" paddingRight="5">
	   				<mx:HBox width="100%">
	   					<mx:VBox width="20%">
	   						<mx:Button id="heightBut" width="100%" label="Height" click="graphPan.title='Height';graphChart.dataProvider=heights;catAxis.dataProvider=heights;lineSeries1.displayName='Height';lineSeries2.visible=false;"/>
	   						<mx:Button id="weightBut" width="100%" label="Weight" click="graphPan.title='Weight';graphChart.dataProvider=weights;catAxis.dataProvider=weights;lineSeries1.displayName='Weight';lineSeries2.visible=false;"/>
	   						<mx:Button id="bpBut" width="100%" label="Blood Pressure" click="graphPan.title='Blood Pressure';graphChart.dataProvider=bps;catAxis.dataProvider=bps;lineSeries1.displayName='Systolic Blood Pressure';lineSeries2.displayName='Diastolic Blood Pressure';lineSeries2.visible=true;"/>
	   						<mx:Button id="tempBut" width="100%" label="Temperature" click="graphPan.title='Temperature';graphChart.dataProvider=temps;catAxis.dataProvider=temps;lineSeries1.displayName='Temperature';lineSeries2.visible=false;"/>
	   						<mx:Button id="pulseBut" width="100%" label="Pulse" click="graphPan.title='Pulse';graphChart.dataProvider=pulses;catAxis.dataProvider=pulses;lineSeries1.displayName='Pulse';lineSeries2.visible=false;"/>
	   					</mx:VBox>
			   			<mx:Panel width="80%" id="graphPan" label="Height" title="Height">
						     <mx:LineChart width="100%" id="graphChart"
						        dataProvider="{heights}" 
						        showDataTips="true">
						        <mx:horizontalAxisRenderer>
							        <mx:AxisRenderer showLine="false" showLabels="false" tickPlacement="none" />
							     </mx:horizontalAxisRenderer>
						        <mx:horizontalAxis>
						           <mx:CategoryAxis id="catAxis"
						                dataProvider="{heights}" 
						                categoryField="visit_date" />
						        </mx:horizontalAxis>
						        <mx:series>
						  
						           <mx:LineSeries id="lineSeries1"
						                yField="value" 
						                displayName="Height"
						           />
						           <mx:LineSeries id="lineSeries2"
						                yField="value2" 
						                displayName="Height"
						                visible="false"
						           />
						        </mx:series>
						     </mx:LineChart>
						</mx:Panel>
	   				</mx:HBox>
	   			</mx:Panel>
	   		</mx:VBox>	   	
   		</mx:ViewStack>		
   	</mx:VBox>		
</mx:HBox>