<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:hc="com.hillelcoren.components.*"
	xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"  
	layout="vertical" 
	width="750" 
	height="565"
	title="{languageArray['Edit Visit']}"
	showCloseButton="true"
	creationComplete="init()"
    close="PopUpManager.removePopUp(this)">
		
	<mx:Script>
		<![CDATA[
			import com.adobe.utils.DateUtil;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.core.Application;
			import mx.collections.ArrayCollection;
			import com.matlabulchifai.events.patient.PatientVisitEvent;
			import com.matlabulchifai.events.visit_type.VisitTypeEvent;
			import com.matlabulchifai.events.condition.ConditionEvent;
			import com.matlabulchifai.events.doctor.DoctorEvent;
			import mx.validators.Validator;
    		import mx.events.ValidationResultEvent;
			
			[Bindable]
			public var patient:XML;
			[Bindable]
			public var visit:XML;
			[Bindable]
			public var languageArray:Object;
			[Bindable]
			public var visitTypeIdMap:Object;
			[Bindable]
			public var conditionIdMap:Object;
			[Bindable]
			public var doctorIdMap:Object;
			[Bindable]
			public var visitTypes:ArrayCollection;
			[Bindable]
			public var conditions:ArrayCollection;
			[Bindable]
			public var doctors:ArrayCollection;
			[Bindable]
			private var gotVisitType:Boolean = false;
			[Bindable]
			private var gotCondition:Boolean = false;
			[Bindable]
			private var gotDoctor:Boolean = false;
			
			private var visitTypeId:String;
			private var conditionId:String;
			private var doctorId:String;
			
			[Bindable]
			private var doctorSearchStr:String;
			[Bindable]
			private var visitTypeSearchStr:String;
			[Bindable]
			private var conditionSearchStr:String;
			[Bindable]
    		public var formIsValid:Boolean = true;
    		
			private var focusedFormControl:DisplayObject;
			
			private function init():void {
				searchVisitTypeTI.selectedItemId = visit.visit_type_id;
				searchConditionTI.selectedItemId = visit.condition_id;
				searchDoctorTI.selectedItemId = visit.doctor_id;
				visitDateDF.selectedDate = DateUtil.parseW3CDTF(visit.visit_date);
				HeightTI.text = visit.height;				
				WeightTI.text = visit.weight;
				SystolicTI.text = visit.systolic;
				DiastolicTI.text = visit.diastolic;
				PulseTI.text = visit.pulse;
				TemperatureTI.text = visit.temperature;
				visitNotesTA.text = visit.notes;
				resetFocus();
				validateForm(new Event("blank"));
			}
			private function validateForm(event:Event):void 
    		{                    
        		focusedFormControl = event.target as DisplayObject;                
        	  	formIsValid = true;            
    	      	validate(visitTypeValidator);    	      	  
    	      	validate(conditionNameValidator);
    	      	validate(doctorNameValidator);
    	      	validate(dateGivenValidator);
    	      	validate(dateGivenValidator);
    	      	validate(weightV);
    	      	validate(heightV);
    	      	validate(systolicV);
    	      	validate(diastolicV);
    	      	validate(temperatureV);
    	      	validate(pulseV);
	     	}

	    	private function validate(validator:Validator):Boolean
    		{                
        	 	var validatorSource:DisplayObject = validator.source as DisplayObject;
         		var suppressEvents:Boolean = (validatorSource != focusedFormControl);
         		var event:ValidationResultEvent = validator.validate(null, suppressEvents); 
         		var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
         		formIsValid = formIsValid && currentControlIsValid;                 
        		return currentControlIsValid;
    		}
    		
    		private function resetFocus():void
    		{
    	    	focusManager.setFocus(searchVisitTypeTI);
	    	}			
			
			
			private function processVisitUpdate():void {
				var visitTypeSelected:Object = searchVisitTypeTI.selectedItem;
				var conditionSelected:Object = searchConditionTI.selectedItem;
				var doctorSelected:Object = searchDoctorTI.selectedItem;
				
				//Stop processing if visit or condition is blank
				//If item alredy exists, then set flag, otherwise create item
				if (visitTypeSelected != null && 
					conditionSelected != null && 
					doctorSelected != null) {
					if (visitTypeSelected.hasOwnProperty("id")) {
						visitTypeId = visitTypeSelected.id;
						gotVisitType = true;
						visitTypeSearchStr = searchVisitTypeTI.text;
					} else {
						visitTypeSearchStr = String(visitTypeSelected);
						svcVisitTypeCreate.send();
					}
					
					if (conditionSelected.hasOwnProperty("id")) {
						conditionId = conditionSelected.id;
						gotCondition = true;
						conditionSearchStr = searchConditionTI.text;
					} else {
						conditionSearchStr = String(conditionSelected);
						svcConditionCreate.send();
					}
					
					if (doctorSelected.hasOwnProperty("id")) {
						doctorId = doctorSelected.id;
						gotDoctor = true;
						doctorSearchStr = searchDoctorTI.text;
					} else {
						doctorSearchStr = String(doctorSelected);
						svcDoctorCreate.send();
					}
					
					//if both condition and visit type and doctor already exist, then call update
					if (gotVisitType && gotCondition && gotDoctor) {
						callVisitUpdate();
					}					
				}
			}
			
			private function handleNewVisitTypeResult(event:ResultEvent):void {
				var newVisitType:XML = XML(event.result);
				
				if (newVisitType != null) {
					//add new visit to visitIdMap and visits collection
					dispatchEvent(new VisitTypeEvent(VisitTypeEvent.VISIT_TYPE_CREATE, newVisitType));
					
					//set flag and id field
					visitTypeId = newVisitType.id;
					gotVisitType = true;
					
					//if all other flag are ready, call update
					if (gotVisitType && gotCondition && gotDoctor) {
						callVisitUpdate();
					}	
				}
			}
			
			private function handleNewConditionResult(event:ResultEvent):void {
				var newCondition:XML = XML(event.result);
				
				if (newCondition != null) {
					//add new condition to conditionIdMap and conditions collection
					dispatchEvent(new ConditionEvent(ConditionEvent.CONDITION_CREATE, newCondition));
					
					//set flag and id field
					conditionId = newCondition.id;
					gotCondition = true;
					
					//if all other flag are ready, call update
					if (gotVisitType && gotCondition && gotDoctor) {
						callVisitUpdate();
					}	
				}
			}
			
			private function handleNewDoctorResult(event:ResultEvent):void {
				var newDoctor:XML = XML(event.result);
				
				if (newDoctor != null) {
					//add new visit to visitIdMap and visits collection
					dispatchEvent(new DoctorEvent(DoctorEvent.DOCTOR_CREATE, newDoctor));
					
					//set flag and id field
					doctorId = newDoctor.id;
					gotDoctor = true;
					
					//if all other flag are ready, call update
					if (gotVisitType && gotCondition && gotDoctor) {
						callVisitUpdate();
					}	
				}
			}
			
			private function callVisitUpdate():void {
				var	params:Object = new	Object();
				params['patient_visit[visit_type_id]'] = visitTypeId;
				params['patient_visit[condition_id]'] = conditionId;
				params['patient_visit[doctor_id]'] = doctorId;
				params['patient_visit[height]'] = HeightTI.text;
				params['patient_visit[weight]'] = WeightTI.text;
				params['patient_visit[diastolic]'] = DiastolicTI.text;
				params['patient_visit[systolic]'] = SystolicTI.text;
				params['patient_visit[temperature]'] = TemperatureTI.text;
				params['patient_visit[pulse]'] = PulseTI.text;
				params['patient_visit[visit_date]'] = visitDateDF.text;
				params['patient_visit[notes]'] = visitNotesTA.text;
				params['_method'] = "PUT";
				svcVisitUpdate.url = "/patient_visits/" + visit.id + ".xml?authenticity_token=" +
							Application.application.parameters.authenticityToken;
				svcVisitUpdate.send(params);
				this.enabled = false;
			}

			private function handleUpdateVisitResult(event:ResultEvent):void {
				var resultXML:XML = XML(event.result);
				dispatchEvent(new PatientVisitEvent(PatientVisitEvent.PATIENT_VISIT_UPDATE, resultXML));
				PopUpManager.removePopUp(this);	
			}
		]]>
	</mx:Script>
	
	<mx:HTTPService
		id="svcVisitUpdate"
		resultFormat="e4x"
		method="POST"
		result="handleUpdateVisitResult(event)">
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcVisitTypeCreate"
		url="/visit_types.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewVisitTypeResult(event)">
		<mx:request>
			<visit_type>
				<name>{visitTypeSearchStr}</name>
				<notes></notes>
			</visit_type>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcConditionCreate"
		url="/conditions.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewConditionResult(event)">
		<mx:request>
			<condition>
				<name>{conditionSearchStr}</name>
				<notes></notes>
			</condition>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcDoctorCreate"
		url="/doctors.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewDoctorResult(event)">
		<mx:request>
			<doctor>
				<name>{doctorSearchStr}</name>
				<notes></notes>
			</doctor>
		</mx:request>
	</mx:HTTPService>
	
    
    <mx:DateValidator 
        id="dateGivenValidator"
        source="{visitDateDF}" 
        property="text"        
    />
	
    <mx:NumberValidator
    	id="heightV"
    	source="{HeightTI}"
    	property="text" 
    	domain="real"
    	required="false"
        allowNegative="false"
        negativeError="{languageArray['The amount may not be negative.']}"
        invalidCharError="{languageArray['The input contains invalid characters.']}"
        decimalPointCountError="{languageArray['The decimal separator occur only once.']}"/>
    <mx:NumberValidator
    	id="weightV"
    	source="{WeightTI}"
    	domain="real"
    	property="text" 
    	required="false"
        allowNegative="false"
        negativeError="{languageArray['The amount may not be negative.']}"
        invalidCharError="{languageArray['The input contains invalid characters.']}"
        decimalPointCountError="{languageArray['The decimal separator occur only once.']}"/>
        
    <mx:NumberValidator
    	id="systolicV"
    	source="{SystolicTI}"
        domain="int"
    	property="text" 
    	required="false"
        allowNegative="false"
        negativeError="{languageArray['The amount may not be negative.']}"
        invalidCharError="{languageArray['The input contains invalid characters.']}"
        decimalPointCountError="{languageArray['The decimal separator occur only once.']}"
        integerError="{languageArray['The number must be an integer.']}"
        lowerThanMinError="{languageArray['The amount is too small.']}"/>
    <mx:NumberValidator
    	id="diastolicV"
    	source="{DiastolicTI}"
    	domain="int"
    	property="text" 
    	required="false"
        allowNegative="false"
        negativeError="{languageArray['The amount may not be negative.']}"
        invalidCharError="{languageArray['The input contains invalid characters.']}"
        decimalPointCountError="{languageArray['The decimal separator occur only once.']}"
        integerError="{languageArray['The number must be an integer.']}"
        lowerThanMinError="{languageArray['The amount is too small.']}"/>
        
    <mx:NumberValidator
    	id="pulseV"
    	source="{PulseTI}"
    	domain="int"
    	property="text" 
    	required="false"
        allowNegative="false"
        negativeError="{languageArray['The amount may not be negative.']}"
        invalidCharError="{languageArray['The input contains invalid characters.']}"
        decimalPointCountError="{languageArray['The decimal separator occur only once.']}"
        integerError="{languageArray['The number must be an integer.']}"
        lowerThanMinError="{languageArray['The amount is too small.']}"/>
        
    <mx:NumberValidator
    	id="temperatureV"
    	source="{TemperatureTI}"
    	property="text" 
        domain="real"
    	required="false"
        allowNegative="false"
        negativeError="{languageArray['The amount may not be negative.']}"
        invalidCharError="{languageArray['The input contains invalid characters.']}"
        decimalPointCountError="{languageArray['The decimal separator occur only once.']}"/>
        
    <mx:StringValidator
    	id="visitTypeValidator"
    	source="{searchVisitTypeTI}"
    	property="text"
    	required="true"
    	requiredFieldError="{languageArray['This field is required.']}"
        tooShortError="{languageArray['This field is shorter than the minimum allowed length.']}"/>
    <mx:StringValidator
    	id="doctorNameValidator"
    	source="{searchDoctorTI}"
    	property="text"
    	required="true"
    	requiredFieldError="{languageArray['This field is required.']}"
        tooShortError="{languageArray['This field is shorter than the minimum allowed length.']}"/>
    <mx:StringValidator
    	id="conditionNameValidator"
    	source="{searchConditionTI}"
    	property="text"
    	required="true"
    	requiredFieldError="{languageArray['This field is required.']}"
        tooShortError="{languageArray['This field is shorter than the minimum allowed length.']}"/>
	
	<mx:HBox verticalAlign="middle" horizontalAlign="center" width="100%" height="90%">
		<mx:Form defaultButton="{OKBtn}">
			<mx:Label text="{patient['last_name']}, {patient['first_name']}" fontWeight="bold" />
			<mx:Spacer height="5" />
			<mx:FormItem label="Visit Type" required="true">
				<hc:AdvancedAutoComplete id="searchVisitTypeTI" dataProvider="{visitTypes}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					searchChange="validateForm(event)"/>
			</mx:FormItem>	
			<mx:FormItem label="Condition Name" required="true">
				<hc:AdvancedAutoComplete id="searchConditionTI" dataProvider="{conditions}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					searchChange="validateForm(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Doctor Name" required="true">
				<hc:AdvancedAutoComplete id="searchDoctorTI" dataProvider="{doctors}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					searchChange="validateForm(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Visit Date" required="true">
				<mx:DateField id="visitDateDF" yearNavigationEnabled="true" minYear="1980"
				change="validateForm(event);"/>
			</mx:FormItem>
			<mx:Spacer height="5" />
			<mx:Text text="Physicals" fontWeight="bold" />
			<mx:HBox>
				<mx:VBox horizontalAlign="right">
					<mx:HBox>
						<mx:FormItem label="Height">
							<mx:TextInput id="HeightTI" width="100%" change="validateForm(event);"/>
						</mx:FormItem>
						<mx:Text text="cm" />
					</mx:HBox>
					<mx:HBox>
						<mx:FormItem label="Weight">
							<mx:TextInput id="WeightTI" width="100%" change="validateForm(event);"/>
						</mx:FormItem>
						<mx:Text text="kg" />
					</mx:HBox>
					<mx:HBox>
						<mx:FormItem label="Systolic Blood Pressure">
							<mx:TextInput id="SystolicTI" change="validateForm(event);"/>
						</mx:FormItem>
						<mx:Text text="mmHg" />
					</mx:HBox>
					
					<mx:HBox>
						<mx:FormItem label="Diastolic Blood Pressure">
							<mx:TextInput id="DiastolicTI" change="validateForm(event);"/>
						</mx:FormItem>
						<mx:Text text="mmHg"/>
					</mx:HBox>
					
				</mx:VBox>
				<mx:VBox horizontalAlign="right">
					<mx:HBox>
						<mx:FormItem label="Pulse">
							<mx:TextInput id="PulseTI" width="100%" change="validateForm(event);"/>
						</mx:FormItem>
						<mx:Text text="bpm" />
					</mx:HBox>
					
					<mx:HBox>
						<mx:FormItem label="Temperature">
							<mx:TextInput id="TemperatureTI" width="100%" change="validateForm(event);"/>
						</mx:FormItem>
						<mx:Text text="°C" />
					</mx:HBox>
					<mx:Spacer height="5" />
					<mx:FormItem label="Notes">
						<mx:TextArea id="visitNotesTA" width="200" height="100" />
					</mx:FormItem>
				</mx:VBox>
			</mx:HBox>
		</mx:Form>
	</mx:HBox>
	
	<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%" height="10%">
		<mx:Button label="OK" id="OKBtn" click="processVisitUpdate()" enabled="{formIsValid}"/>
		<mx:Button label="{languageArray['Cancel']}" id="CancelBtn" click="PopUpManager.removePopUp(this)" />
	</mx:HBox>
	
</mx:TitleWindow>
