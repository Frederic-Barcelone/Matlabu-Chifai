<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:hc="com.hillelcoren.components.*"
	xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"  
	layout="vertical" 
	width="475" 
	height="575"
	title="{languageArray['Add New Visit']}"
	showCloseButton="true"
	creationComplete="init()"
    close="PopUpManager.removePopUp(this)">
	
	<mx:Script>
		<![CDATA[
			import flash.events.Event;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import com.matlabulchifai.events.patient.PatientVisitEvent;
			import com.matlabulchifai.events.patient.PatientConditionEvent;
			import com.matlabulchifai.events.visit_type.VisitTypeEvent;
			import com.matlabulchifai.events.doctor.DoctorEvent;
			import com.matlabulchifai.events.condition.ConditionEvent;
			import mx.controls.Alert;
			
			import mx.core.Application;
			import mx.validators.Validator;
    		import mx.events.ValidationResultEvent;
			
			[Bindable]
			public var patient:XML;
			[Bindable]
			public var patientID:Number;
			[Bindable]
			public var conditionIdMap:Object;
			[Bindable]
			public var visitTypeIdMap:Object;
			[Bindable]
			public var doctorIdMap:Object;
			[Bindable]
			public var conditions:ArrayCollection;
			[Bindable]
			public var visitTypes:ArrayCollection;
			[Bindable]
			public var doctors:ArrayCollection;
			[Bindable]
			public var languageArray:Object;
			[Bindable]
			private var gotVisitType:Boolean = false;
			[Bindable]
			private var gotCondition:Boolean = false;
			[Bindable]
			private var gotDoctor:Boolean = false;
			private var visitTypeId:String;
			private var conditionId:String;
			private var doctorId:String;
			[Bindable]
			private var doctorSearchStr:String;
			[Bindable]
			private var visitTypeSearchStr:String;
			[Bindable]
			private var conditionSearchStr:String;
			[Bindable]
    		public var formIsValid:Boolean = false;
    		
			private var focusedFormControl:DisplayObject;
			
			private function init():void {
				resetFocus();	
			}
			private function validateForm(event:Event):void 
    		{                    
        		focusedFormControl = event.target as DisplayObject;                
        	  	formIsValid = true;            
    	      	validate(visitTypeValidator);    	      	  
    	      	validate(conditionNameValidator);
    	      	validate(doctorNameValidator);
    	      	validate(dateGivenValidator);
	     	}

	    	private function validate(validator:Validator):Boolean
    		{                
        	 	var validatorSource:DisplayObject = validator.source as DisplayObject;
         		var suppressEvents:Boolean = (validatorSource != focusedFormControl);
         		var event:ValidationResultEvent = validator.validate(null, suppressEvents); 
         		var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
         		formIsValid = formIsValid && currentControlIsValid;                 
        		return currentControlIsValid;
    		}
    		
    		private function resetFocus():void
    		{
    	    	focusManager.setFocus(searchVisitTypeTI);
	    	}			
			
			
			
			private function processVisitCreate():void {
				var visitTypeSelected:Object = searchVisitTypeTI.selectedItem;
				var conditionSelected:Object = searchConditionTI.selectedItem;
				var doctorSelected:Object = searchDoctorTI.selectedItem;
				
				//Stop processing if visit or condition is blank
				//If item alredy exists, then set flag, otherwise create item
				if (visitTypeSelected != null && 
					conditionSelected != null && 
					doctorSelected != null) {
					if (visitTypeSelected.hasOwnProperty("id")) {
						visitTypeId = visitTypeSelected.id;
						gotVisitType = true;
						visitTypeSearchStr = searchVisitTypeTI.text;
					} else {
						visitTypeSearchStr = String(visitTypeSelected);
						svcVisitTypeCreate.send();
					}
					
					if (conditionSelected.hasOwnProperty("id")) {
						conditionId = conditionSelected.id;
						gotCondition = true;
						conditionSearchStr = searchConditionTI.text;
					} else {
						conditionSearchStr = String(conditionSelected);
						svcConditionCreate.send();
					}
					
					if (doctorSelected.hasOwnProperty("id")) {
						doctorId = doctorSelected.id;
						gotDoctor = true;
						doctorSearchStr = searchDoctorTI.text;
					} else {
						doctorSearchStr = String(doctorSelected);
						svcDoctorCreate.send();
					}
					
					//if both condition and visit type and doctor already exist, then call update
					if (gotVisitType && gotCondition && gotDoctor) {
						callVisitCreate();
					}					
				}
			}
			
			private function handleNewVisitTypeResult(event:ResultEvent):void {
				var newVisitType:XML = XML(event.result);
				
				if (newVisitType != null) {
					//add new visit to visitIdMap and visits collection
					dispatchEvent(new VisitTypeEvent(VisitTypeEvent.VISIT_TYPE_CREATE, newVisitType));
					
					//set flag and id field
					visitTypeId = newVisitType.id;
					gotVisitType = true;
					
					//if all other flag are ready, call update
					if (gotVisitType && gotCondition && gotDoctor) {
						callVisitCreate();
					}	
				}
			}
			
			private function handleNewConditionResult(event:ResultEvent):void {
				var newCondition:XML = XML(event.result);
				
				if (newCondition != null) {
					//add new condition to conditionIdMap and conditions collection
					dispatchEvent(new ConditionEvent(ConditionEvent.CONDITION_CREATE, newCondition));
					
					//set flag and id field
					conditionId = newCondition.id;
					gotCondition = true;
					
					//if all other flag are ready, call update
					if (gotVisitType && gotCondition && gotDoctor) {
						callVisitCreate();
					}	
				}
			}
			
			private function handleNewDoctorResult(event:ResultEvent):void {
				var newDoctor:XML = XML(event.result);
				
				if (newDoctor != null) {
					//add new visit to visitIdMap and visits collection
					dispatchEvent(new DoctorEvent(DoctorEvent.DOCTOR_CREATE, newDoctor));
					
					//set flag and id field
					doctorId = newDoctor.id;
					gotDoctor = true;
					
					//if all other flag are ready, call update
					if (gotVisitType && gotCondition && gotDoctor) {
						callVisitCreate();
					}	
				}
			}
			
			private function callVisitCreate():void {
				svcVisitCreate.send();
				this.enabled = false;
			}
			
			private function handleNewPatientResult(event:ResultEvent):void {
				var resultXML:XML = XML(event.result);
				Matlabulchifai.debug("visit created = \n" + resultXML);
				dispatchEvent(new PatientVisitEvent(PatientVisitEvent.PATIENT_VISIT_CREATE, resultXML));
				PopUpManager.removePopUp(this);	
			}
			
			
		]]>
	</mx:Script>
	
	<mx:Metadata>
		[Event(name="visitCreate", type="com.matlabulchifai.events.patient.PatientVisitEvent")]
	</mx:Metadata>
	
	<mx:HTTPService
		id="svcVisitTypeCreate"
		url="/visit_types.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewVisitTypeResult(event)">
		<mx:request>
			<visit_type>
				<name>{visitTypeSearchStr}</name>
				<notes></notes>
			</visit_type>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcConditionCreate"
		url="/conditions.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewConditionResult(event)">
		<mx:request>
			<condition>
				<name>{conditionSearchStr}</name>
				<notes></notes>
			</condition>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcDoctorCreate"
		url="/doctors.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewDoctorResult(event)">
		<mx:request>
			<doctor>
				<name>{doctorSearchStr}</name>
				<notes></notes>
			</doctor>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcVisitCreate"
		url="/patient_visits.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewPatientResult(event)">
		<mx:request>
			<patient_visit>
				<condition>{conditionSearchStr}</condition>
				<type>{visitTypeSearchStr}</type>
				<visit_date>{visitDateDF.text}</visit_date>
				<notes>{visitNotesTA.text}</notes>
				<height>{HeightTI.text}</height>
				<weight>{WeightTI.text}</weight>
				<systolic>{SystolicTI.text}</systolic>
				<diastolic>{DiastolicTI.text}</diastolic>
				<pulse>{PulseTI.text}</pulse>
				<temperature>{TemperatureTI.text}</temperature>
				<doctor>{doctorSearchStr}</doctor>
				<patient_id>{patientID}</patient_id>
			</patient_visit>
		</mx:request>
	</mx:HTTPService>
	
	<mx:StringValidator 
        id="visitTypeValidator"
        source="{searchVisitTypeTI}" 
        property="text"
        minLength="2"
    />
    
    <mx:StringValidator 
        id="conditionNameValidator"
        source="{searchConditionTI}" 
        property="text"
        minLength="2"
    />
    
    <mx:StringValidator 
        id="doctorNameValidator"
        source="{searchDoctorTI}" 
        property="text"
        minLength="2"
    />
    
    <mx:DateValidator 
        id="dateGivenValidator"
        source="{visitDateDF}" 
        property="text"        
    />
	
	
	<mx:VBox verticalAlign="middle" horizontalAlign="center" width="100%" height="90%">
		<mx:Form defaultButton="{OKBtn}">
			<mx:Label text="{patient['last_name']}, {patient['first_name']}" fontWeight="bold"/>
			<mx:Spacer height="5" />			
			<mx:FormItem label="Visit Type" required="true">
				<hc:AdvancedAutoComplete id="searchVisitTypeTI" dataProvider="{visitTypes}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					change="validateForm(event);"/>
			</mx:FormItem>
			<mx:FormItem label="Condition Name" required="true">
				<hc:AdvancedAutoComplete id="searchConditionTI" dataProvider="{conditions}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					change="validateForm(event);"/>
			</mx:FormItem>
			<mx:FormItem label="Doctor Name" required="true">
				<hc:AdvancedAutoComplete id="searchDoctorTI" dataProvider="{doctors}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					change="validateForm(event);"/>
			</mx:FormItem>
			<mx:FormItem label="Visit Date" required="true">
				<mx:DateField id="visitDateDF" yearNavigationEnabled="true" minYear="1980"
					creationComplete="visitDateDF.selectedDate = new Date();" 
					change="validateForm(event);"/>
			</mx:FormItem>
			<mx:Spacer height="5" />
			<mx:Text text="Physicals" fontWeight="bold" />
			<mx:FormItem label="Height">
				<mx:TextInput id="HeightTI" width="100%"/>
			</mx:FormItem>			
			<mx:FormItem label="Weight">
				<mx:TextInput id="WeightTI" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Systolic Blood Pressure">
				<mx:TextInput id="SystolicTI"/>
			</mx:FormItem>
			<mx:FormItem label="Diastolic Blood Pressure">
				<mx:TextInput id="DiastolicTI"/>
			</mx:FormItem>
			<mx:FormItem label="Pulse">
				<mx:TextInput id="PulseTI" width="100%"/>
			</mx:FormItem>
			<mx:FormItem label="Temperature">
				<mx:TextInput id="TemperatureTI" width="100%"/>
			</mx:FormItem>
			<mx:Spacer height="5" />
			<mx:FormItem label="Notes">
				<mx:TextArea id="visitNotesTA" width="200" height="100" />
			</mx:FormItem>
		</mx:Form>
	</mx:VBox>
	
	
	<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%" height="10%">
		<mx:Button label="OK" id="OKBtn" click="processVisitCreate()" enabled="{formIsValid}"/>
		<mx:Button label="{languageArray['Cancel']}" id="CancelBtn" click="PopUpManager.removePopUp(this)" />
	</mx:HBox>
	
</mx:TitleWindow>
