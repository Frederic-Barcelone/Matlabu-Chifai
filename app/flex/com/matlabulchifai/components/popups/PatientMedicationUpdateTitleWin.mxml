<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:hc="com.hillelcoren.components.*"
	xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"  
	layout="vertical" 
	width="475" 
	height="525"
	title="{languageArray['Edit Medication']}"
	showCloseButton="true"
	creationComplete="init()"
    close="PopUpManager.removePopUp(this)">
		
	<mx:Script>
		<![CDATA[
			import com.adobe.utils.DateUtil;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.core.Application;
			import mx.collections.ArrayCollection;
			import com.matlabulchifai.events.patient.PatientMedicationEvent;
			import com.matlabulchifai.events.medication.MedicationEvent;
			import com.matlabulchifai.events.condition.ConditionEvent;
			import com.matlabulchifai.events.doctor.DoctorEvent;
			import mx.validators.Validator;
    		import mx.events.ValidationResultEvent;
			
			[Bindable]
			public var patient:XML;
			[Bindable]
			public var medication:XML;
			[Bindable]
			public var languageArray:Object;
			[Bindable]
			public var medicationIdMap:Object;
			[Bindable]
			public var conditionIdMap:Object;
			[Bindable]
			public var doctorIdMap:Object;
			[Bindable]
			public var medications:ArrayCollection;
			[Bindable]
			public var conditions:ArrayCollection;
			[Bindable]
			public var doctors:ArrayCollection;
			[Bindable]
			private var gotMedication:Boolean = false;
			[Bindable]
			private var gotCondition:Boolean = false;
			[Bindable]
			private var gotDoctor:Boolean = false;
			[Bindable]
			private var doctorSearchStr:String;
			[Bindable]
			private var medicationSearchStr:String;
			[Bindable]
			private var conditionSearchStr:String;
			
			private var medicationId:String;
			private var conditionId:String;
			private var doctorId:String;
			
			[Bindable]
    		public var formIsValid:Boolean = true;
    		
			private var focusedFormControl:DisplayObject;
			
			
			private function init():void {
				searchMedicationTI.selectedItemId = medication.medication_id;
				searchConditionTI.selectedItemId = medication.condition_id;
				searchDoctorTI.selectedItemId = medication.doctor_id;
				medicationDateDF.selectedDate = DateUtil.parseW3CDTF(medication.date_given);
				FrequencyTI.text = medication.frequency;				
				DosageTI.text = medication.dosage;
				medicationNotesTI.text = medication.notes;
				resetFocus();	
			}
			
			private function validateForm(event:Event):void 
    		{                    
        		focusedFormControl = event.target as DisplayObject;                
        	  	formIsValid = true;            
    	      	//validate(medicationNameValidator);    	      	  
    	      	//validate(conditionNameValidator);
    	      	//validate(doctorNameValidator);
    	      	validate(dosageValidator);
    	      	validate(frequencyValidator);
    	      	validate(dateGivenValidator);
	     	}

	    	private function validate(validator:Validator):Boolean
    		{                
    			
        	 	var validatorSource:DisplayObject = validator.source as DisplayObject;
         		var suppressEvents:Boolean = (validatorSource != focusedFormControl);
         		var event:ValidationResultEvent = validator.validate(null, suppressEvents);
         		        		
         		var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID);
         		formIsValid = formIsValid && currentControlIsValid;                 
        		return currentControlIsValid;
    		}
    		
    		private function resetFocus():void
    		{
    	    	focusManager.setFocus(searchMedicationTI);
	    	}
			
			private function processMedicationUpdate():void {
				var medicationSelected:Object = searchMedicationTI.selectedItem;
				var conditionSelected:Object = searchConditionTI.selectedItem;
				var doctorSelected:Object = searchDoctorTI.selectedItem;
				
				//Stop processing if medication or condition is blank
				//If item alredy exists, then set flag, otherwise create item
				if (medicationSelected != null && 
					conditionSelected != null && 
					doctorSelected != null) {
					if (medicationSelected.hasOwnProperty("id")) {
						medicationId = medicationSelected.id;
						gotMedication = true;
						medicationSearchStr = searchMedicationTI.text;
					} else {
						medicationSearchStr = String(medicationSelected);
						svcMedicationCreate.send();
					}
					
					if (conditionSelected.hasOwnProperty("id")) {
						conditionId = conditionSelected.id;
						gotCondition = true;
						conditionSearchStr = searchConditionTI.selectedItem;
					} else {
						conditionSearchStr = String(conditionSelected);
						svcConditionCreate.send();
					}
					
					if (doctorSelected.hasOwnProperty("id")) {
						doctorId = doctorSelected.id;
						gotDoctor = true;
						doctorSearchStr = searchDoctorTI.text;
					} else {
						doctorSearchStr = String(doctorSelected);
						svcDoctorCreate.send();
					}
					
					//if both condition and medication already exist, then call update
					if (gotMedication && gotCondition && gotDoctor) {
						callMedicationUpdate();
					}					
				}
			}
			
			private function handleNewMedicationResult(event:ResultEvent):void {
				var newMedication:XML = XML(event.result);
				
				if (newMedication != null) {
					//add new medication to medicationIdMap and medications collection
					dispatchEvent(new MedicationEvent(MedicationEvent.MEDICATION_CREATE, newMedication));
					
					//set flag and id field
					medicationId = newMedication.id;
					gotMedication = true;
					
					//if all other flag are ready, call update
					if (gotMedication && gotCondition && gotDoctor) {
						callMedicationUpdate();
					}	
				}
			}
			
			private function handleNewConditionResult(event:ResultEvent):void {
				var newCondition:XML = XML(event.result);
				
				if (newCondition != null) {
					//add new condition to conditionIdMap and conditions collection
					dispatchEvent(new ConditionEvent(ConditionEvent.CONDITION_CREATE, newCondition));
					
					//set flag and id field
					conditionId = newCondition.id;
					gotCondition = true;
					
					//if all other flag are ready, call update
					if (gotMedication && gotCondition && gotDoctor) {
						callMedicationUpdate();
					}	
				}
			}
			
			private function handleNewDoctorResult(event:ResultEvent):void {
				var newDoctor:XML = XML(event.result);
				
				if (newDoctor != null) {
					//add new medication to medicationIdMap and medications collection
					dispatchEvent(new DoctorEvent(DoctorEvent.DOCTOR_CREATE, newDoctor));
					
					//set flag and id field
					doctorId = newDoctor.id;
					gotDoctor = true;
					
					//if all other flag are ready, call update
					if (gotMedication && gotCondition && gotDoctor) {
						callMedicationUpdate();
					}	
				}
			}
			
			private function callMedicationUpdate():void {
				var	params:Object = new	Object();
				params['patient_medication[medication_id]'] = medicationId;
				params['patient_medication[condition_id]'] = conditionId;
				params['patient_medication[doctor_id]'] = doctorId;
				params['patient_medication[dosage]'] = DosageTI.text;
				params['patient_medication[frequency]'] = FrequencyTI.text;
				params['patient_medication[date_given]'] = medicationDateDF.text;
				params['patient_medication[notes]'] = medicationNotesTI.text;
				params['_method'] = "PUT";
				svcMedicationUpdate.url = "/patient_medications/" + medication.id + ".xml?authenticity_token=" +
							Application.application.parameters.authenticityToken;
				svcMedicationUpdate.send(params);
				this.enabled = false;
				
			}
			
			private function handleUpdateMedicationResult(event:ResultEvent):void {
				var resultXML:XML = XML(event.result);
				dispatchEvent(new PatientMedicationEvent(PatientMedicationEvent.PATIENT_MEDICATION_UPDATE, resultXML));
				PopUpManager.removePopUp(this);
			}
		]]>
	</mx:Script>
	
	<mx:HTTPService
		id="svcMedicationUpdate"
		resultFormat="e4x"
		method="POST"
		result="handleUpdateMedicationResult(event)">
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcMedicationCreate"
		url="/medications.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewMedicationResult(event)">
		<mx:request>
			<medication>
				<name>{medicationSearchStr}</name>
				<notes></notes>
			</medication>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcConditionCreate"
		url="/conditions.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewConditionResult(event)">
		<mx:request>
			<condition>
				<name>{conditionSearchStr}</name>
				<notes></notes>
			</condition>
		</mx:request>
	</mx:HTTPService>
	
	<mx:HTTPService
		id="svcDoctorCreate"
		url="/doctors.xml?authenticity_token={Application.application.parameters.authenticityToken}"
		resultFormat="e4x"
		contentType="application/xml"
		method="POST"
		result="handleNewDoctorResult(event)">
		<mx:request>
			<doctor>
				<name>{doctorSearchStr}</name>
				<notes></notes>
			</doctor>
		</mx:request>
	</mx:HTTPService>
	
	<mx:StringValidator 
        id="medicationNameValidator"
        source="{searchMedicationTI}" 
        property="text"
        minLength="2"
    />
    
       
    <mx:StringValidator 
        id="conditionNameValidator"
        source="{searchConditionTI}" 
        property="text"
        minLength="2"
    />
    
    <mx:StringValidator 
        id="doctorNameValidator"
        source="{searchDoctorTI}" 
        property="text"
        minLength="2"
    />
    
    <mx:StringValidator 
        id="dosageValidator"
        source="{DosageTI}" 
        property="text"
        minLength="2"
    />
    
    <mx:StringValidator 
        id="frequencyValidator"
        source="{FrequencyTI}" 
        property="text"
        minLength="2"
    />
    
    <mx:DateValidator 
        id="dateGivenValidator"
        source="{medicationDateDF}" 
        property="text"        
    />
	
	
	<mx:HBox verticalAlign="middle" horizontalAlign="center" width="100%" height="90%">
		<mx:Form defaultButton="{OKBtn}">
			<mx:Label text="{patient['last_name']}, {patient['first_name']}" fontWeight="bold" />
			<mx:Spacer height="5" />
			<mx:FormItem label="Medication Name" required="true">
				<hc:AdvancedAutoComplete id="searchMedicationTI" dataProvider="{medications}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					change="validateForm(event);"/>
			</mx:FormItem>			
			<mx:FormItem label="Condition Name" required="true">
				<hc:AdvancedAutoComplete id="searchConditionTI" dataProvider="{conditions}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					change="validateForm(event);"/>
			</mx:FormItem>
			<mx:FormItem label="Doctor Name" required="true">
				<hc:AdvancedAutoComplete id="searchDoctorTI" dataProvider="{doctors}" 
					labelField="name" selectedItemStyleName="facebook" matchType="anyPart" 
					showBrowseButton="true" browserFields="name" enableClearIcon="true" width="275" 
					allowNewValues="true" backspaceAction="remove" autoSelectEnabled="false"
					change="validateForm(event);"/>	
			</mx:FormItem>
			<mx:Spacer height="5" />
			<mx:FormItem label="Dosage" required="true">
				<mx:TextInput id="DosageTI" change="validateForm(event);"/>
			</mx:FormItem>
			<mx:Spacer height="5" />
			<mx:FormItem label="Frequency" required="true">
				<mx:TextInput id="FrequencyTI" change="validateForm(event);"/>
			</mx:FormItem>
			<mx:Spacer height="5" />
			<mx:FormItem label="Date Given" required="true">
				<mx:DateField id="medicationDateDF" yearNavigationEnabled="true" minYear="1980"
					change="validateForm(event);"/>
			</mx:FormItem>
			<mx:Spacer height="5" />
			<mx:FormItem label="Notes">
				<mx:TextArea id="medicationNotesTI" width="200" height="100" />
			</mx:FormItem>
		</mx:Form>
	</mx:HBox>
	
	<mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%" height="10%">
		<mx:Button label="OK" id="OKBtn" click="processMedicationUpdate()" enabled="{formIsValid}"/>
		<mx:Button label="{languageArray['Cancel']}" id="CancelBtn" click="PopUpManager.removePopUp(this)" />
	</mx:HBox>
	
</mx:TitleWindow>
