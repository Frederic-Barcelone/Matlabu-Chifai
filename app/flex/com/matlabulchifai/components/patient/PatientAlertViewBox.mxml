<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" 
	height="100%"
	label="{languageArray['Alerts']}"
	show="listAlerts()"
    creationComplete="init()">
	   			
	   			
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.collections.ArrayCollection;
			import flash.events.Event;
			import mx.events.ListEvent;
			import mx.core.IFlexDisplayObject;
			import mx.rpc.events.ResultEvent;
			import mx.collections.XMLListCollection;
	    	import mx.collections.IViewCursor;
			import mx.managers.PopUpManager;
			
			import com.matlabulchifai.components.popups.AlertCreateTitleWin;
			import com.matlabulchifai.components.popups.AlertUpdateTitleWin;
			import com.matlabulchifai.events.patient.PatientAlertEvent;
			
			[Bindable]
			public var languageArray:Object = Application.application.languageArray;
			
			[Bindable]
			public var patientID:Number;
			
			[Bindable]
			public var patient:XML;
			
			private var alertPopUp:AlertCreateTitleWin;
			private var alertUpdatePopUp:AlertUpdateTitleWin;
			
			private var authToken:String = "?authenticity_token=" + Application.application.parameters.authenticityToken;
			
			private function init():void{
				
			}
			
			private function showAlertCreateTitleWin():void {				
				alertPopUp = AlertCreateTitleWin(PopUpManager.createPopUp(this, AlertCreateTitleWin, true));
				alertPopUp.patient = patient;
				alertPopUp.patientID = patientID;
				alertPopUp.languageArray = languageArray;
				PopUpManager.centerPopUp(alertPopUp);
				alertPopUp.addEventListener(PatientAlertEvent.PATIENT_ALERT_CREATE, handleAlertEvent);
			}
			
			private function handleAlertClick(event:ListEvent):void {
				if (event.columnIndex != event.currentTarget.columns.length-1){
					var alert:XML = XML(event.currentTarget.selectedItem)
					showAlertUpdateTitleWin(alert);
				}
			}
			
			private function showAlertUpdateTitleWin(alert:XML):void {				
				alertUpdatePopUp = AlertUpdateTitleWin(PopUpManager.createPopUp(this, AlertUpdateTitleWin, true));
				alertUpdatePopUp.patient = patient;
				alertUpdatePopUp.alert = alert;			
				alertUpdatePopUp.languageArray = languageArray;
				PopUpManager.centerPopUp(alertUpdatePopUp);
				alertUpdatePopUp.addEventListener(PatientAlertEvent.PATIENT_ALERT_UPDATE, handleAlertUpdateEvent);
			}
			
			public function listAlerts():void {
				alertsXLC.removeAll();
				svcAlertsList.url="/patients/" + patientID + "/patient_alerts.xml?";
				svcAlertsList.send();
			}
			
			public function deleteAlert(alert:XML):void {
				svcAlertsDestroy.url = "/patient_alerts/" + alert.id + ".xml" + authToken;
				svcAlertsDestroy.send({_method:"DELETE"});
				this.enabled = false;
		    }
		    
		    private function handleAlertsDestroyResult(event:ResultEvent):void {
		    	var alert:XML = XML(event.result);
		    	listAlerts();
		    	dispatchEvent(new PatientAlertEvent(PatientAlertEvent.PATIENT_ALERT_DESTROY, alert));
		    }
		    
		    private function handleAlertsListResult(event:ResultEvent):void {
				var resultXML:XML = XML(event.result);
				Matlabulchifai.debug("prescriptions_notes = \n" + resultXML);
				this.enabled = true;
			}
			
			public function handleAlertEvent(event:Event):void {
				dispatchEvent(new PatientAlertEvent(PatientAlertEvent.PATIENT_ALERT_CREATE, null));
				listAlerts();				
				removeAlertEventListener();			
			}	
			
			public function removeAlertEventListener():void {				
				if (alertPopUp.hasEventListener(PatientAlertEvent.PATIENT_ALERT_CREATE)) {					
					alertPopUp.removeEventListener(PatientAlertEvent.PATIENT_ALERT_CREATE, handleAlertEvent);				
				}			
			}
			
			public function handleAlertUpdateEvent(event:PatientAlertEvent):void {
				var patientAlert:XML = XML(event.patientAlert);
				dispatchEvent(new PatientAlertEvent(PatientAlertEvent.PATIENT_ALERT_UPDATE, patientAlert));
				listAlerts();				
				removeAlertUpdateEventListener();			
			}
			
			public function removeAlertUpdateEventListener():void {				
				if (alertUpdatePopUp.hasEventListener(PatientAlertEvent.PATIENT_ALERT_UPDATE)) {					
					alertUpdatePopUp.removeEventListener(PatientAlertEvent.PATIENT_ALERT_UPDATE, handleAlertUpdateEvent);				
				}			
			}
		]]>
	</mx:Script>
	
	<mx:XMLListCollection id="alertsXLC"
        source="{XMLList(svcAlertsList.lastResult.children())}"/>
	
	<mx:HTTPService
        id="svcAlertsList"
        resultFormat="e4x"
        result="handleAlertsListResult(event)"/>
	   			
	<mx:HTTPService
        id="svcAlertsDestroy"
        resultFormat="e4x"
        method="POST"
        result="handleAlertsDestroyResult(event)"/>
	   			
   	<mx:Panel title="{languageArray['Alert List']}" width="100%" height="100%" 
   		paddingTop="5" paddingLeft="5" paddingRight="5">
   		<mx:LinkButton label="{languageArray['Add New Alert']}" color="#0000FF" 
   			click="showAlertCreateTitleWin()"/>
   		<mx:DataGrid id="alertsGrid" width="100%" height="100%" textAlign="center" 
   			dataProvider="{alertsXLC}" wordWrap="true" variableRowHeight="true"
   			 itemClick="handleAlertClick(event)">						
   			<mx:columns>														
   				<mx:DataGridColumn headerText="{languageArray['Alert Date']}" 
   					dataField="alert_date" width="90"/>							
   				<mx:DataGridColumn headerText="{languageArray['Alert Note']}" 
   					dataField="notes"/>
   				<mx:DataGridColumn headerText="" width="150" 
	                    editable="false">
	                    <mx:itemRenderer>
	                        <mx:Component>
	                            <mx:Button label="{outerDocument.languageArray['Delete Alert']}" click="outerDocument.deleteAlert(XML(data))" />
	                        </mx:Component>
	                    </mx:itemRenderer>
				</mx:DataGridColumn>				
   			</mx:columns>					
   		</mx:DataGrid>
   	</mx:Panel>
	
</mx:VBox>
